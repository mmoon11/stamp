import Head from "next/head";
import Navbar from "@/components/Navbar";
import { useRouter } from "next/router";
import Link from "next/link";
import IEateryCard from "@/components/IEateryCard";
import {
  collection,
  query,
  onSnapshot,
  doc,
  getDoc,
  DocumentData,
} from "firebase/firestore";
import { db } from "../../util/firebase";
import { useEffect, useState } from "react";
import { Divider } from "@mui/material";

export default function Itinerary() {
  const router = useRouter();

  const current = router.query;

  type NavLink = {
    name: string;
    path: string;
  };

  const navData: NavLink[] = [
    {
      name: "Eateries",
      path: "/eateries",
    },
    {
      name: "Sights",
      path: "/sights",
    },
    {
      name: "Itineraries",
      path: "/itineraries",
    },
  ];

  const dates: string[] = [];
  current.dates ? current.dates.map((date: string) => dates.push(date)) : null;

  const styles = {
    outerContainer: {
      display: "flex",
      justifyContent: "center",
    },
    container: {
      display: "flex",
      alignItems: "center",
      width: "90%",
      marginTop: "-7%",
    },
    title: {
      fontSize: 48,
      color: "white",
      marginBottom: "1%",
    },
    option: {
      fontFamily: "Optima",
      margin: "12%",
      fontSize: 20,
      color: "white",
    },
    top: {
      backgroundImage: `linear-gradient(to bottom, rgb(0,0,0,0.8), rgba(255, 255, 255, 0)), url(${current.image})`,
      backgroundSize: "cover",
      backgroundPosition: "center",
      display: "flex",
      flexDirection: "column",
      height: 500,
    },
    dates: {
      color: "white",
      fontSize: 18,
    },
    eateriesContainer: {
      display: "flex",
      flexDirection: "column",
      width: "100%",
      gap: 20,
    },
    eateriesHeader: {
      color: "white",
      fontSize: 30,
      width: "fit-content",
      textShadow: "1px 1px 2px black",
    },
  };

  const itinerariesCollectionRef = collection(db, "itineraries");

  const locationID = current.id ? current.id.toString() : null;

  const [eateries, setEateries] = useState<DocumentData>();

  const eateriesDocRef = locationID
    ? doc(itinerariesCollectionRef, locationID)
    : null;

  async function getEateries() {
    if (eateriesDocRef) {
      const docSnap = await getDoc(eateriesDocRef);
      if (docSnap.exists()) {
        console.log("Document data:", docSnap.data().eateries);
        setEateries(docSnap.data().eateries);
      } else {
        console.log("No such document!");
      }
    }
  }

  useEffect(() => {
    getEateries();
  }, [current]);

  return (
    <>
      <Head>
        <title>Stamp</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div style={styles.top}>
        <div
          style={{
            display: "flex",
            marginTop: "2%",
            marginLeft: "2%",
            marginBottom: "3%",
          }}
        >
          <nav>
            {navData.map(({ name, path }) => (
              <Link key={path} href={path} style={styles.option}>
                {name}
              </Link>
            ))}
          </nav>
        </div>
        <div
          style={{ display: "flex", flexDirection: "column", marginLeft: "5%" }}
        >
          <p style={styles.title}>{current.location}</p>
          {dates.length > 0 ? (
            <p style={styles.dates}>
              {dates[0]} - {dates[1]}
            </p>
          ) : null}
        </div>
      </div>

      <div style={styles.outerContainer}>
        <div style={styles.container}>
          <div style={styles.eateriesContainer}>
            <p style={styles.eateriesHeader}>
              Saved Eateries
              <Divider
                sx={{ backgroundColor: "white", height: 2, width: "120%" }}
              />
            </p>
            <div
              style={{
                display: "flex",
                flexWrap: "wrap",
                gap: "5%",
                width: "100%",
              }}
            >
              {eateries
                ? eateries.map((eatery, index) => (
                    <IEateryCard key={index} eatery={eatery} />
                  ))
                : null}
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
